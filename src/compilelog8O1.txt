*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  store i32 0, i32* %count, align 4, !tbaa !3
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  store i32 0, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !3
  %cmp = icmp slt i32 %2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3) #3
  br label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %4, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %count, align 4, !tbaa !3
  %inc1 = add i32 %5, 1
  store i32 %inc1, i32* %count, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !tbaa !3
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  %7 = load i32, i32* %count, align 4, !tbaa !3
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #3
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  store i32 0, i32* %count, align 4, !tbaa !3
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  store i32 0, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !3
  %cmp = icmp slt i32 %2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3) #3
  br label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %4, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %count, align 4, !tbaa !3
  %inc1 = add i32 %5, 1
  store i32 %inc1, i32* %count, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !tbaa !3
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  %7 = load i32, i32* %count, align 4, !tbaa !3
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #3
  ret i32 0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  store i32 0, i32* %count, align 4, !tbaa !3
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  store i32 0, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !3
  %cmp = icmp slt i32 %2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3) #3
  br label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %4, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %count, align 4, !tbaa !3
  %inc1 = add i32 %5, 1
  store i32 %inc1, i32* %count, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !tbaa !3
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  %7 = load i32, i32* %count, align 4, !tbaa !3
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #3
  ret i32 0
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  store i32 0, i32* %count, align 4, !tbaa !3
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  store i32 0, i32* %i, align 4, !tbaa !3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !3
  %cmp = icmp slt i32 %2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3) #3
  %4 = load i32, i32* %count, align 4, !tbaa !3
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)
  %5 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %5) #3
  ret i32 0

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %6, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %count, align 4, !tbaa !3
  %inc1 = add i32 %7, 1
  store i32 %inc1, i32* %count, align 4, !tbaa !3
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %8 = load i32, i32* %i, align 4, !tbaa !3
  %inc2 = add nsw i32 %8, 1
  store i32 %inc2, i32* %i, align 4, !tbaa !3
  br label %for.cond
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  %5 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #3
  %6 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i1 %cmp
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  %5 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #3
  %6 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  %5 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #3
  %6 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i1 %cmp
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  %5 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #3
  %6 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i1 %cmp
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  %5 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #3
  %6 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i1 %cmp
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #3
  ret i1 %cmp
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %dummy.addr = alloca i8*, align 8
  %c = alloca i64, align 8
  store i8* %dummy, i8** %dummy.addr, align 8, !tbaa !7
  %0 = bitcast i64* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  store i64 0, i64* %c, align 8, !tbaa !9
  %1 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  %3 = load i64, i64* %c, align 8, !tbaa !9
  %inc = add nsw i64 %3, 1
  store i64 %inc, i64* %c, align 8, !tbaa !9
  br label %if.end

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.else2, %if.then1
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %4 = load i64, i64* %c, align 8, !tbaa !9
  %5 = inttoptr i64 %4 to i8*
  %6 = bitcast i64* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i8* %5
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %dummy.addr = alloca i8*, align 8
  %c = alloca i64, align 8
  store i8* %dummy, i8** %dummy.addr, align 8, !tbaa !7
  %0 = bitcast i64* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  store i64 0, i64* %c, align 8, !tbaa !9
  %1 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  %3 = load i64, i64* %c, align 8, !tbaa !9
  %inc = add nsw i64 %3, 1
  store i64 %inc, i64* %c, align 8, !tbaa !9
  br label %if.end

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.else2, %if.then1
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %4 = load i64, i64* %c, align 8, !tbaa !9
  %5 = inttoptr i64 %4 to i8*
  %6 = bitcast i64* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i8* %5
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %dummy.addr = alloca i8*, align 8
  %c = alloca i64, align 8
  store i8* %dummy, i8** %dummy.addr, align 8, !tbaa !7
  %0 = bitcast i64* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  store i64 0, i64* %c, align 8, !tbaa !9
  %1 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  %3 = load i64, i64* %c, align 8, !tbaa !9
  %inc = add nsw i64 %3, 1
  store i64 %inc, i64* %c, align 8, !tbaa !9
  br label %if.end

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.else2, %if.then1
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %4 = load i64, i64* %c, align 8, !tbaa !9
  %5 = inttoptr i64 %4 to i8*
  %6 = bitcast i64* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i8* %5
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %dummy.addr = alloca i8*, align 8
  %c = alloca i64, align 8
  store i8* %dummy, i8** %dummy.addr, align 8, !tbaa !7
  %0 = bitcast i64* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  store i64 0, i64* %c, align 8, !tbaa !9
  %1 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  %3 = load i64, i64* %c, align 8, !tbaa !9
  %inc = add nsw i64 %3, 1
  store i64 %inc, i64* %c, align 8, !tbaa !9
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %4 = load i64, i64* %c, align 8, !tbaa !9
  %5 = inttoptr i64 %4 to i8*
  %6 = bitcast i64* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #3
  ret i8* %5
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  %inc = add nsw i64 0, 1
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ %inc, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}
*** IR Dump Before Force set function attributes ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #3
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) #2

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Infer set function attributes ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #3
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #3
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) #2

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) #3

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Called Value Propagation ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) #3

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Global Variable Optimizer ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @attack() #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i32 0, i32* @x, align 4, !tbaa !3
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %2 = load i32, i32* @x, align 4, !tbaa !3
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) #3

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i32 1, i32* @x, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Promote Memory to Register ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Promote Memory to Register ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %.b = load i1, i1* @x
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Promote Memory to Register ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}
*** IR Dump Before Dead Argument Elimination ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %.b = load i1, i1* @x
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %count.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.inc ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  br i1 %call, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %inc1 = add i32 %count.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %count.1 = phi i32 [ %inc1, %if.then ], [ %count.0, %for.body ]
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* @threadfunc, i8* null)
  %.b = load i1, i1* @x
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** %dummy)
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else2, label %if.then1

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i64 [ 0, %if.then ], [ 0, %if.else2 ], [ 1, %if.then1 ]
  %2 = inttoptr i64 %c.0 to i8*
  ret i8* %2
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Remove unused exception handling info ***
Printing <null> Function
*** IR Dump Before Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump Before Deduce function attributes ***
Printing <null> Function
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Early CSE w/ MemorySSA ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %0) #4
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Conditionally eliminate dead library calls ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before PGOMemOPSize ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #4
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #4
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #4
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #4
  ret i1 %cmp
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Early CSE w/ MemorySSA ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = add i32 %count.0, 1
  %spec.select = select i1 %call, i32 %inc1, i32 %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Conditionally eliminate dead library calls ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.0, %inc1
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before PGOMemOPSize ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.0, %inc1
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.0, %inc1
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.0, %inc1
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.0, %inc1
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0)
  ret i32 0

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond
}
*** IR Dump Before Rotate Loops ***
; Preheader:
entry:
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.body, %entry
  %count.0 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %cmp = icmp ult i32 %i.0, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.body:                                         ; preds = %for.cond
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.0
  %inc2 = add nuw nsw i32 %i.0, 1
  br label %for.cond

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %count.0.lcssa = phi i32 [ %count.0, %for.cond ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0.lcssa)
  ret i32 0
*** IR Dump Before Loop Invariant Code Motion ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.08
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %count.0.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0.lcssa)
  ret i32 0
*** IR Dump Before Unswitch loops ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.08
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %count.0.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0.lcssa)
  ret i32 0
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %count.0.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.08
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %count.0.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %count.0.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %inc1, %count.08
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Induction Variable Simplification ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %cmp = icmp ult i32 %inc2, 100000
  br i1 %cmp, label %for.body, label %for.cond.cleanup

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before Recognize loop idioms ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before Delete dead loops ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp ne i32 %inc2, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop Invariant Code Motion ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind ssp uwtable
define internal i8* @threadfunc(i8* %dummy) #0 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before SROA ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Early CSE w/ MemorySSA ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Jump Threading ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Value Propagation ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Conditionally eliminate dead library calls ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before PGOMemOPSize ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Jump Threading ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Value Propagation ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Remove unused exception handling info ***
Printing <null> Function
*** IR Dump Before Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump Before Deduce function attributes ***
Printing <null> Function
*** IR Dump Before A No-Op Barrier Pass ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Deduce function attributes in RPO ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Global Variable Optimizer ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Dead Global Elimination ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Float to int ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Rotate Loops ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before Loop Distribution ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop Vectorization ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop Load Elimination ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Float to int ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Loop Distribution ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Loop Vectorization ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Loop Load Elimination ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Float to int ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop Distribution ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Demanded bits analysis ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop Vectorization ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Loop Load Elimination ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  store i1 true, i1* @x, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  store i1 true, i1* @x, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.else2, %if.then
  %c.0 = phi i8* [ null, %if.then ], [ null, %if.else2 ], [ inttoptr (i64 1 to i8*), %if.then1 ]
  ret i8* %c.0
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Strip Unused Function Prototypes ***; ModuleID = 'relaxedmem8.c'
source_filename = "relaxedmem8.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }

@alwaysTrue = internal unnamed_addr global i32 1, align 4
@.str = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@x = internal unnamed_addr global i1 false, align 4
@y = internal unnamed_addr global i32 0, align 4
@z = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}

declare i32 @pthread_create(%struct._opaque_pthread_t**, %struct._opaque_pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}

declare i32 @"\01_pthread_join"(%struct._opaque_pthread_t*, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (trunk 334301) (llvm/trunk 334300)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Loop Sink ***
; Preheader:
entry:
  br label %for.body

; Loop:
for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0
*** IR Dump Before Remove redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select.lcssa)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Hoist/decompose integer division and remainder ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %spec.select)
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %i.09 = phi i32 [ 0, %entry ], [ %inc2, %for.body ]
  %count.08 = phi i32 [ 0, %entry ], [ %spec.select, %for.body ]
  %0 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* @alwaysTrue, align 4, !tbaa !3
  %call = tail call fastcc zeroext i1 @attack()
  %inc1 = zext i1 %call to i32
  %spec.select = add i32 %count.08, %inc1
  %inc2 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %inc2, 100000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Remove redundant instructions ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Hoist/decompose integer division and remainder ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @attack() unnamed_addr #0 {
entry:
  %dummy = alloca i8*, align 8
  %thread = alloca %struct._opaque_pthread_t*, align 8
  store i1 false, i1* @x, align 4
  store i32 0, i32* @y, align 4, !tbaa !3
  store volatile i32 0, i32* @z, align 4, !tbaa !3
  %0 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %1 = bitcast %struct._opaque_pthread_t** %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  %call = call i32 @pthread_create(%struct._opaque_pthread_t** nonnull %thread, %struct._opaque_pthread_attr_t* null, i8* (i8*)* nonnull @threadfunc, i8* null) #5
  %.b = load i1, i1* @x, align 4
  %2 = zext i1 %.b to i32
  store i32 %2, i32* @y, align 4, !tbaa !3
  %3 = load %struct._opaque_pthread_t*, %struct._opaque_pthread_t** %thread, align 8, !tbaa !7
  %call1 = call i32 @"\01_pthread_join"(%struct._opaque_pthread_t* %3, i8** nonnull %dummy) #5
  %4 = load volatile i32, i32* @z, align 4, !tbaa !3
  %cmp = icmp sgt i32 %4, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i1 %cmp
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before LCSSA Verifier ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Remove redundant instructions ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Hoist/decompose integer division and remainder ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: norecurse nounwind ssp uwtable
define internal i8* @threadfunc(i8* nocapture readnone %dummy) #4 {
entry:
  %0 = load i32, i32* @y, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end3, label %if.else

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @alwaysTrue, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end3, label %if.else2

if.else2:                                         ; preds = %if.else
  store volatile i32 111, i32* @z, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.else, %entry, %if.else2
  %c.0 = phi i8* [ null, %if.else2 ], [ null, %entry ], [ inttoptr (i64 1 to i8*), %if.else ]
  store i1 true, i1* @x, align 4
  ret i8* %c.0
}
