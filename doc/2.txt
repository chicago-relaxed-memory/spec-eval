--------------------------------
- For code without spectr, if there is an information flow then there is a dependency
- Spectr executions are not prefix closed.

- Word Tearing (a la llvm)
- Three kinds of speculation:
  - relaxed memory, allows reordering (can only be "correct")
  - pipeline execution of conditionals
  - aborted transactions
- Mechanisms
  - partial order where order == semantic dependency
    dependency only enforced when it is actually needed
  - logic used for sequencing
    sequential semantics resolved as building the pomset, not afterwards
    so no need for pomset to have po in addition to hb/dependency
  - can unify actions in different branches
    allows us to merge (x!=1|a) and (x==1|a) to get (true|a)
  - need rf because???

- Data dependency has different semantics from control dependency:
  Consider example with boolean values:
    x:=1; || r:=x;if(r){y:=1;}else{y:=0;}
  has different semantics from 
    x:=1; || r:=x;y:=r;

Lochbihler typesafety examples in Fig 7 and 8.
Figure 7 is method call before allocation: gets stuck.
Figure 8 fails subject reduction:

b:=false; x:=null; y:=null;
(x:=y;)
||(r:=x; if(b){s:=new C();}else{r:=new D();} y:=r;)
||(b:=true;)

Variant from Section 5.4:
(r:=x; if(b){s:=new char[2];}else{r:=new char[2];} y:=r;)

Similar to alan's example Lochbiler section 5.1: "These races have the same
pattern as in Fig. 5 [the standard tar pit], where the JMM is sufficiently
strong to disallow out-of-thin- air values. However, in Fig. 8, this cycle
occurs only if the then branch (l. 5) executes"

This is the JMM trick of executing the else branch to justify things in most
executions, then switching to the then branch in the final execution.

--------------------------------

Syntax:

  phi ::= Wxv | Rxv | G(phi) | true | phi1 /\ phi2 | ~ phi

Abbreviations:

  F(phi) = ~ G(~ phi)
  etc

Given a labelled rf-poset (E,lbl,<,rf), define satisfaction:

  e |= Wxv if lbl(e) = (true,Wxv)
  e |= Rxv if lbl(e) = (true,Rxv)
  e |= G(phi) if forall d < e, d |= phi

Denote rf-poset by its carrier set E.
Then a set of rf-poset is denoted as Es.

  Es |= phi if forall E in Es: forall e in E: e |= phi

Induction for G [sound proof rule]:  

  G(phi) => phi
  --------------
   phi /\ G(phi)

Coinduction for F [sound proof rule]:

  phi => F(phi)
  ------------
     ~ phi

Superset closed formula:

  Define: phi is superset closed if (Es |= phi) and (Es' supseteq Es) imply (Es' |= phi)

Parallel composition [sound proof rule]:

  phi is superset closed
  Es1 |= phi  
  Es2 |= phi
  ----------------
  Es1 || Es2  |= phi

Closed at x:

  Define closed(x) = (Rxv => F(Wxv))

Local declaration [sound proof rule]:

  x notin phi
  Es |= closed(x) => phi
  ----------------------
  var x; Es |= phi

I think we need one more thing to express the examples.  Init is a "local" write that does not create an event.

  Define ⟦init x=M;C⟧ = ⟦C⟧[M/x]

A version of Alan's conditional TAR example:

  var x,y,z;
  init x=y=z=0;
  y:=x  ||  if(~z){x:=1}else{x:=y;a:=y}  ||  z:=1

Goal: Es |= ~ F(Wa1)   [impossible to write a=1]

Invariant:

     F(Wy1) => F(Rx1)
  /\ F(Wa1) => F(Ry1) /\ G(Wx1 => F(Ry1))

Closing y:

  F(Wa1) => F(Rx1) /\ G(Wx1 => F(Rx1))

Closing x:

  F(Wa1) => F(Wx1) /\ G(Wx1 => F(Wx1))

Using coinduction for F:  

  F(Wa1) => F(Wx1) /\ G(~ Wx1)

Simplifying:  

  F(Wa1) => false
